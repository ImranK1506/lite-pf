---
export interface Project {
  title: string;
  url: string;
  description: string;
}

export interface Props {
  projects: Project[];
  onProjectClick: (project: Project) => void;
}

// Destructure props passed from the parent component
const { projects, onProjectClick } = Astro.props;
---

<div class="space-y-6">
  {projects.map((project, index) => (
        <div
            class="bg-gradient-to-r from-gray-800 via-gray-900 to-black p-6 rounded-lg shadow-lg transition-all transform hover:scale-105 hover:shadow-xl cursor-pointer border border-gray-700 hover:border-pink-500 group"
            data-index={index}
        >
          <h2 class="text-xl sm:text-2xl font-bold text-gray-100 transition-all">
            {project.title}
          </h2>
          <p class="mt-2 text-sm sm:text-base text-gray-400 group-hover:text-gray-200">
            {project.description}
          </p>
      </div>
  ))}
</div>

<script>
  document.querySelectorAll('[data-index]').forEach((card) => {
    card.addEventListener('click', (event) => {
      const index = card.getAttribute('data-index');
      const project = Astro.props.projects[index]; // Access the project data
      Astro.props.onProjectClick(project); // Call the parent handler
    });
  });
</script>
